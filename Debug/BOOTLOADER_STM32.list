
BOOTLOADER_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f48  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001054  08001054  00022800  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001054  08001054  00011054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001058  08001058  00011058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000020  20002800  0800105c  00012800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000044  20002820  0800107c  00012820  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20002864  0800107c  00012864  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00022800  2**0
                  CONTENTS, READONLY
  9 .debug_line   00001d8e  00000000  00000000  00022829  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00002195  00000000  00000000  000245b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000b9f  00000000  00000000  0002674c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000458  00000000  00000000  000272f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000380  00000000  00000000  00027748  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0000189d  00000000  00000000  00027ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00007407  00000000  00000000  00029365  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003076c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e04  00000000  00000000  000307e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .BufferSection 00002800  20000000  20000000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20002820 	.word	0x20002820
 8000128:	00000000 	.word	0x00000000
 800012c:	0800103c 	.word	0x0800103c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20002824 	.word	0x20002824
 8000148:	0800103c 	.word	0x0800103c

0800014c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800014c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000184 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000152:	e003      	b.n	800015c <LoopCopyDataInit>

08000154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000154:	4b0c      	ldr	r3, [pc, #48]	; (8000188 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800015a:	3104      	adds	r1, #4

0800015c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800015c:	480b      	ldr	r0, [pc, #44]	; (800018c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800015e:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000164:	d3f6      	bcc.n	8000154 <CopyDataInit>
	ldr	r2, =_sbss
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000168:	e002      	b.n	8000170 <LoopFillZerobss>

0800016a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800016a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800016c:	f842 3b04 	str.w	r3, [r2], #4

08000170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000170:	4b09      	ldr	r3, [pc, #36]	; (8000198 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000174:	d3f9      	bcc.n	800016a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000176:	f000 fcf1 	bl	8000b5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800017a:	f000 ff3b 	bl	8000ff4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800017e:	f000 f935 	bl	80003ec <main>
	bx	lr
 8000182:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000184:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000188:	0800105c 	.word	0x0800105c
	ldr	r0, =_sdata
 800018c:	20002800 	.word	0x20002800
	ldr	r3, =_edata
 8000190:	20002820 	.word	0x20002820
	ldr	r2, =_sbss
 8000194:	20002820 	.word	0x20002820
	ldr	r3, = _ebss
 8000198:	20002864 	.word	0x20002864

0800019c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800019c:	e7fe      	b.n	800019c <ADC1_2_IRQHandler>

0800019e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800019e:	b480      	push	{r7}
 80001a0:	af00      	add	r7, sp, #0
}
 80001a2:	bf00      	nop
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr

080001aa <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80001aa:	b480      	push	{r7}
 80001ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80001ae:	e7fe      	b.n	80001ae <HardFault_Handler+0x4>

080001b0 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80001b0:	b480      	push	{r7}
 80001b2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80001b4:	e7fe      	b.n	80001b4 <MemManage_Handler+0x4>

080001b6 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80001b6:	b480      	push	{r7}
 80001b8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80001ba:	e7fe      	b.n	80001ba <BusFault_Handler+0x4>

080001bc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80001bc:	b480      	push	{r7}
 80001be:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80001c0:	e7fe      	b.n	80001c0 <UsageFault_Handler+0x4>

080001c2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80001c2:	b480      	push	{r7}
 80001c4:	af00      	add	r7, sp, #0
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr

080001ce <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80001ce:	b480      	push	{r7}
 80001d0:	af00      	add	r7, sp, #0
}
 80001d2:	bf00      	nop
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr

080001da <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80001da:	b480      	push	{r7}
 80001dc:	af00      	add	r7, sp, #0
}
 80001de:	bf00      	nop
 80001e0:	46bd      	mov	sp, r7
 80001e2:	bc80      	pop	{r7}
 80001e4:	4770      	bx	lr

080001e6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80001e6:	b480      	push	{r7}
 80001e8:	af00      	add	r7, sp, #0
}
 80001ea:	bf00      	nop
 80001ec:	46bd      	mov	sp, r7
 80001ee:	bc80      	pop	{r7}
 80001f0:	4770      	bx	lr

080001f2 <__enable_irq>:

#if !defined __VOLATILE
#define __VOLATILE inline
#endif

static __INLINE void __enable_irq()               { __ASM volatile ("cpsie i"); }
 80001f2:	b480      	push	{r7}
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	b662      	cpsie	i
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <__disable_irq>:
static __INLINE void __disable_irq()              { __ASM volatile ("cpsid i"); }
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
 8000204:	b672      	cpsid	i
 8000206:	bf00      	nop
 8000208:	46bd      	mov	sp, r7
 800020a:	bc80      	pop	{r7}
 800020c:	4770      	bx	lr
	...

08000210 <Bootloader_Main>:
**
**===========================================================================
*/

void Bootloader_Main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0

	msg.ID = REPLY_READY;
 8000214:	4b0c      	ldr	r3, [pc, #48]	; (8000248 <Bootloader_Main+0x38>)
 8000216:	22fe      	movs	r2, #254	; 0xfe
 8000218:	701a      	strb	r2, [r3, #0]
	msg.length = 0;
 800021a:	4b0b      	ldr	r3, [pc, #44]	; (8000248 <Bootloader_Main+0x38>)
 800021c:	2200      	movs	r2, #0
 800021e:	811a      	strh	r2, [r3, #8]
	MTP_SendData(&msg);
 8000220:	4809      	ldr	r0, [pc, #36]	; (8000248 <Bootloader_Main+0x38>)
 8000222:	f000 fe2d 	bl	8000e80 <MTP_SendData>

	while(1)
	{
		msg.Buffer = buffer;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <Bootloader_Main+0x38>)
 8000228:	4a08      	ldr	r2, [pc, #32]	; (800024c <Bootloader_Main+0x3c>)
 800022a:	605a      	str	r2, [r3, #4]
		if(MTP_ReceiveData(&msg, 0x00077ADB) == NO_ERR)
 800022c:	4908      	ldr	r1, [pc, #32]	; (8000250 <Bootloader_Main+0x40>)
 800022e:	4806      	ldr	r0, [pc, #24]	; (8000248 <Bootloader_Main+0x38>)
 8000230:	f000 fd08 	bl	8000c44 <MTP_ReceiveData>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d1f5      	bne.n	8000226 <Bootloader_Main+0x16>
		{
			CMD = msg.ID;
 800023a:	4b03      	ldr	r3, [pc, #12]	; (8000248 <Bootloader_Main+0x38>)
 800023c:	781a      	ldrb	r2, [r3, #0]
 800023e:	4b05      	ldr	r3, [pc, #20]	; (8000254 <Bootloader_Main+0x44>)
 8000240:	701a      	strb	r2, [r3, #0]
			Command_Process();
 8000242:	f000 f809 	bl	8000258 <Command_Process>
		msg.Buffer = buffer;
 8000246:	e7ee      	b.n	8000226 <Bootloader_Main+0x16>
 8000248:	20002840 	.word	0x20002840
 800024c:	20000000 	.word	0x20000000
 8000250:	00077adb 	.word	0x00077adb
 8000254:	2000284c 	.word	0x2000284c

08000258 <Command_Process>:
	}

}

void Command_Process(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	u32 address;
	u32 sp;
	switch (CMD)
 800025e:	4b47      	ldr	r3, [pc, #284]	; (800037c <Command_Process+0x124>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	3b01      	subs	r3, #1
 8000264:	2b05      	cmp	r3, #5
 8000266:	f200 8085 	bhi.w	8000374 <Command_Process+0x11c>
 800026a:	a201      	add	r2, pc, #4	; (adr r2, 8000270 <Command_Process+0x18>)
 800026c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000270:	08000289 	.word	0x08000289
 8000274:	08000295 	.word	0x08000295
 8000278:	080002a1 	.word	0x080002a1
 800027c:	080002dd 	.word	0x080002dd
 8000280:	08000315 	.word	0x08000315
 8000284:	08000337 	.word	0x08000337
	{
	case CMD_FLASH_LOCK:
		Flash_Lock();
 8000288:	f000 f9dc 	bl	8000644 <Flash_Lock>
		Reply(REPLY_ACK);
 800028c:	2010      	movs	r0, #16
 800028e:	f000 f899 	bl	80003c4 <Reply>
		break;
 8000292:	e06f      	b.n	8000374 <Command_Process+0x11c>

	case CMD_FLASH_UNLOCK:
		Flash_Unlock();
 8000294:	f000 f9f2 	bl	800067c <Flash_Unlock>
		Reply(REPLY_ACK);
 8000298:	2010      	movs	r0, #16
 800029a:	f000 f893 	bl	80003c4 <Reply>
		break;
 800029e:	e069      	b.n	8000374 <Command_Process+0x11c>

	case CMD_DATA_WRITE:
		if(Flash_WriteData((void *)*(u32*)(&(msg.Buffer[0])), &(msg.Buffer[4]), ((msg.length - 4) / 2) +  1) == NO_ERR)
 80002a0:	4b37      	ldr	r3, [pc, #220]	; (8000380 <Command_Process+0x128>)
 80002a2:	685b      	ldr	r3, [r3, #4]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4618      	mov	r0, r3
 80002a8:	4b35      	ldr	r3, [pc, #212]	; (8000380 <Command_Process+0x128>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	1d19      	adds	r1, r3, #4
 80002ae:	4b34      	ldr	r3, [pc, #208]	; (8000380 <Command_Process+0x128>)
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	3b04      	subs	r3, #4
 80002b4:	0fda      	lsrs	r2, r3, #31
 80002b6:	4413      	add	r3, r2
 80002b8:	105b      	asrs	r3, r3, #1
 80002ba:	b29b      	uxth	r3, r3
 80002bc:	3301      	adds	r3, #1
 80002be:	b29b      	uxth	r3, r3
 80002c0:	461a      	mov	r2, r3
 80002c2:	f000 f929 	bl	8000518 <Flash_WriteData>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d103      	bne.n	80002d4 <Command_Process+0x7c>
		{
			Reply(REPLY_ACK);
 80002cc:	2010      	movs	r0, #16
 80002ce:	f000 f879 	bl	80003c4 <Reply>
		}
		else
		{
			Reply(REPLY_ERR_WRITE_DATA);
		}
		break;
 80002d2:	e04f      	b.n	8000374 <Command_Process+0x11c>
			Reply(REPLY_ERR_WRITE_DATA);
 80002d4:	2013      	movs	r0, #19
 80002d6:	f000 f875 	bl	80003c4 <Reply>
		break;
 80002da:	e04b      	b.n	8000374 <Command_Process+0x11c>

	case CMD_RAM_APP_EXEC:
		address = (u32)&buffer;
 80002dc:	4b29      	ldr	r3, [pc, #164]	; (8000384 <Command_Process+0x12c>)
 80002de:	607b      	str	r3, [r7, #4]
		sp = *((u32 *) address);
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	603b      	str	r3, [r7, #0]
		__disable_irq();
 80002e6:	f7ff ff8b 	bl	8000200 <__disable_irq>
		if((sp & 0xF0000000) == 0x20000000)
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80002f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80002f4:	d13b      	bne.n	800036e <Command_Process+0x116>
		{
			HardwareReset();
 80002f6:	f000 f847 	bl	8000388 <HardwareReset>

			SCB_SetVectorTableOffset(address);
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 fbbe 	bl	8000a7c <SCB_SetVectorTableOffset>

			__enable_irq();
 8000300:	f7ff ff77 	bl	80001f2 <__enable_irq>

			JumpToApp(*((u32 *) (address + 4)), sp);
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3304      	adds	r3, #4
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	6839      	ldr	r1, [r7, #0]
 800030c:	4618      	mov	r0, r3
 800030e:	f000 f854 	bl	80003ba <JumpToApp>
		}
		break;
 8000312:	e02c      	b.n	800036e <Command_Process+0x116>

	case CMD_SECTOR_ERASE:
		if(Flash_ErasePage(*(u32*)(&(msg.Buffer[0]))) == NO_ERR)
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <Command_Process+0x128>)
 8000316:	685b      	ldr	r3, [r3, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	4618      	mov	r0, r3
 800031c:	f000 f950 	bl	80005c0 <Flash_ErasePage>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d103      	bne.n	800032e <Command_Process+0xd6>
		{
			Reply(REPLY_ACK);
 8000326:	2010      	movs	r0, #16
 8000328:	f000 f84c 	bl	80003c4 <Reply>
		}
		else
		{
			Reply(REPLY_NACK);
		}
		break;
 800032c:	e022      	b.n	8000374 <Command_Process+0x11c>
			Reply(REPLY_NACK);
 800032e:	2011      	movs	r0, #17
 8000330:	f000 f848 	bl	80003c4 <Reply>
		break;
 8000334:	e01e      	b.n	8000374 <Command_Process+0x11c>

	case CMD_JUMP:
		address = *(u32*)(&(msg.Buffer[0]));
 8000336:	4b12      	ldr	r3, [pc, #72]	; (8000380 <Command_Process+0x128>)
 8000338:	685b      	ldr	r3, [r3, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	607b      	str	r3, [r7, #4]
		sp = *((u32 *) address);
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	603b      	str	r3, [r7, #0]
		__disable_irq();
 8000344:	f7ff ff5c 	bl	8000200 <__disable_irq>
		if((sp & 0xF0000000) == 0x20000000)
 8000348:	683b      	ldr	r3, [r7, #0]
 800034a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800034e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000352:	d10e      	bne.n	8000372 <Command_Process+0x11a>
		{
			HardwareReset();
 8000354:	f000 f818 	bl	8000388 <HardwareReset>

			SCB_SetVectorTableOffset(address);
 8000358:	6878      	ldr	r0, [r7, #4]
 800035a:	f000 fb8f 	bl	8000a7c <SCB_SetVectorTableOffset>

			JumpToApp(*((u32 *) (address + 4)), sp);
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	3304      	adds	r3, #4
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	6839      	ldr	r1, [r7, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f000 f827 	bl	80003ba <JumpToApp>
		}
		break;
 800036c:	e001      	b.n	8000372 <Command_Process+0x11a>
		break;
 800036e:	bf00      	nop
 8000370:	e000      	b.n	8000374 <Command_Process+0x11c>
		break;
 8000372:	bf00      	nop
	}
}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000284c 	.word	0x2000284c
 8000380:	20002840 	.word	0x20002840
 8000384:	20000000 	.word	0x20000000

08000388 <HardwareReset>:

static void HardwareReset(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	RCC_ResetGPIOA();
 800038c:	f000 fb0c 	bl	80009a8 <RCC_ResetGPIOA>
	RCC_ResetUART();
 8000390:	f000 fb38 	bl	8000a04 <RCC_ResetUART>
	RCC_DisableGPIOA();
 8000394:	f000 fb1a 	bl	80009cc <RCC_DisableGPIOA>
	RCC_DisableUART();
 8000398:	f000 fb46 	bl	8000a28 <RCC_DisableUART>
	RCC_DisableDMA();
 800039c:	f000 fb60 	bl	8000a60 <RCC_DisableDMA>

	Interrupts_DisableIRQ(USART1_IRQn);
 80003a0:	2025      	movs	r0, #37	; 0x25
 80003a2:	f000 f835 	bl	8000410 <Interrupts_DisableIRQ>
	Interrupts_DisableIRQ(DMA1_Channel4_IRQn);
 80003a6:	200e      	movs	r0, #14
 80003a8:	f000 f832 	bl	8000410 <Interrupts_DisableIRQ>
	Interrupts_DisableIRQ(DMA1_Channel5_IRQn);
 80003ac:	200f      	movs	r0, #15
 80003ae:	f000 f82f 	bl	8000410 <Interrupts_DisableIRQ>
	RCCSystemInit();
 80003b2:	f000 fa47 	bl	8000844 <RCCSystemInit>
}
 80003b6:	bf00      	nop
 80003b8:	bd80      	pop	{r7, pc}

080003ba <JumpToApp>:

static void JumpToApp(u32 address, u32 sp)
{
	__ASM("msr msp, r1");
 80003ba:	f381 8808 	msr	MSP, r1
	__ASM("bx r0");
 80003be:	4700      	bx	r0
}
 80003c0:	bf00      	nop
	...

080003c4 <Reply>:

static void Reply(u8 msgID)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	msg.ID = msgID;
 80003ce:	4a06      	ldr	r2, [pc, #24]	; (80003e8 <Reply+0x24>)
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	7013      	strb	r3, [r2, #0]
	msg.length = 0;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <Reply+0x24>)
 80003d6:	2200      	movs	r2, #0
 80003d8:	811a      	strh	r2, [r3, #8]
	MTP_SendData(&msg);
 80003da:	4803      	ldr	r0, [pc, #12]	; (80003e8 <Reply+0x24>)
 80003dc:	f000 fd50 	bl	8000e80 <MTP_SendData>
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20002840 	.word	0x20002840

080003ec <main>:
**
**===========================================================================
*/

int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0


	/* Message Transfer Protocol Initialization */
	MTP_Init();
 80003f0:	f000 fbd8 	bl	8000ba4 <MTP_Init>

	/* Bootloader Application */
	Bootloader_Main();
 80003f4:	f7ff ff0c 	bl	8000210 <Bootloader_Main>


	while(1)
 80003f8:	e7fe      	b.n	80003f8 <main+0xc>

080003fa <Interrupts_EnableIRQ>:
    return NVIC_GetDevicePriority(IRQn);
  }
}

void Interrupts_EnableIRQ(s32 IRQn)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b082      	sub	sp, #8
 80003fe:	af00      	add	r7, sp, #0
 8000400:	6078      	str	r0, [r7, #4]
	NVIC_EnableIRQ(IRQn);
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 f9f0 	bl	80007e8 <NVIC_EnableIRQ>
}
 8000408:	bf00      	nop
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <Interrupts_DisableIRQ>:

void Interrupts_DisableIRQ(s32 IRQn)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	NVIC_DisableIRQ(IRQn);
 8000418:	6878      	ldr	r0, [r7, #4]
 800041a:	f000 f9fb 	bl	8000814 <NVIC_DisableIRQ>
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}

08000426 <DMA_ChannelInit>:
#include "DMA_private.h"
#include "DMA_config.h"
#include "DMA_interface.h"

void DMA_ChannelInit(u32 chennel, DMA_ChannelSetup_t setup)
{
 8000426:	b480      	push	{r7}
 8000428:	b083      	sub	sp, #12
 800042a:	af00      	add	r7, sp, #0
 800042c:	6078      	str	r0, [r7, #4]
 800042e:	6039      	str	r1, [r7, #0]
	((DMA_Channel_TypeDef *) chennel)->CCR = (*((u32*) &setup)) << 4;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	463a      	mov	r2, r7
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	0112      	lsls	r2, r2, #4
 8000438:	601a      	str	r2, [r3, #0]
}
 800043a:	bf00      	nop
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	bc80      	pop	{r7}
 8000442:	4770      	bx	lr

08000444 <DMA_ChennelEnable>:

void DMA_ChennelEnable(u32 chennel)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	((DMA_Channel_TypeDef *) chennel)->CCR |= DMA_CCRx_EN;
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	6812      	ldr	r2, [r2, #0]
 8000452:	f042 0201 	orr.w	r2, r2, #1
 8000456:	601a      	str	r2, [r3, #0]
}
 8000458:	bf00      	nop
 800045a:	370c      	adds	r7, #12
 800045c:	46bd      	mov	sp, r7
 800045e:	bc80      	pop	{r7}
 8000460:	4770      	bx	lr

08000462 <DMA_ChennelDisable>:

void DMA_ChennelDisable(u32 chennel)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
	((DMA_Channel_TypeDef *) chennel)->CCR &= ~DMA_CCRx_EN;
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	6812      	ldr	r2, [r2, #0]
 8000470:	f022 0201 	bic.w	r2, r2, #1
 8000474:	601a      	str	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	bc80      	pop	{r7}
 800047e:	4770      	bx	lr

08000480 <DMA_ChennelNumberOfData>:

void DMA_ChennelNumberOfData(u32 chennel, u16 number)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
 8000488:	460b      	mov	r3, r1
 800048a:	807b      	strh	r3, [r7, #2]
	((DMA_Channel_TypeDef *) chennel)->CNDTR = (u32) number;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	887a      	ldrh	r2, [r7, #2]
 8000490:	605a      	str	r2, [r3, #4]
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <DMA_ChennelMemAddress>:

void DMA_ChennelMemAddress(u32 chennel, void * address)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
 80004a4:	6039      	str	r1, [r7, #0]
	((DMA_Channel_TypeDef *) chennel)->CMAR = (u32)((u32 *)address);
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	60da      	str	r2, [r3, #12]
}
 80004ac:	bf00      	nop
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bc80      	pop	{r7}
 80004b4:	4770      	bx	lr

080004b6 <DMA_ChennelPeriphAddress>:

void DMA_ChennelPeriphAddress(u32 chennel, void * address)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
 80004be:	6039      	str	r1, [r7, #0]
	((DMA_Channel_TypeDef *) chennel)->CPAR = (u32)((u32 *)address);
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	683a      	ldr	r2, [r7, #0]
 80004c4:	609a      	str	r2, [r3, #8]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <DMA_ChennelInterruptEnable>:

void DMA_ChennelInterruptEnable(u32 chennel)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
	((DMA_Channel_TypeDef *) chennel)->CCR |= DMA_CCRx_TCIE | DMA_CCRx_TEIE;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	6812      	ldr	r2, [r2, #0]
 80004de:	f042 020a 	orr.w	r2, r2, #10
 80004e2:	601a      	str	r2, [r3, #0]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
	...

080004f0 <DMA_InterruptFlagClear>:
{
	((DMA_Channel_TypeDef *) chennel)->CCR &= ~(DMA_CCRx_TCIE | DMA_CCRx_TEIE);
}

void DMA_InterruptFlagClear(u32 chennelNumber)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
	DMA1->IFCR = 0x0F << ((chennelNumber - 1) << 2);
 80004f8:	4a06      	ldr	r2, [pc, #24]	; (8000514 <DMA_InterruptFlagClear+0x24>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	210f      	movs	r1, #15
 8000502:	fa01 f303 	lsl.w	r3, r1, r3
 8000506:	6053      	str	r3, [r2, #4]
}
 8000508:	bf00      	nop
 800050a:	370c      	adds	r7, #12
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop
 8000514:	40020000 	.word	0x40020000

08000518 <Flash_WriteData>:
	}
	return Local_Error;
}

STD_ERR Flash_WriteData(volatile void * DestAddress, volatile void * SrcAddress, u16 NumberOfHalfWords)
{
 8000518:	b480      	push	{r7}
 800051a:	b087      	sub	sp, #28
 800051c:	af00      	add	r7, sp, #0
 800051e:	60f8      	str	r0, [r7, #12]
 8000520:	60b9      	str	r1, [r7, #8]
 8000522:	4613      	mov	r3, r2
 8000524:	80fb      	strh	r3, [r7, #6]
	volatile STD_ERR Local_Error = ERR;
 8000526:	2301      	movs	r3, #1
 8000528:	757b      	strb	r3, [r7, #21]
	u16 Local_Iterator = 0;
 800052a:	2300      	movs	r3, #0
 800052c:	82fb      	strh	r3, [r7, #22]
	if(((u32) DestAddress >= FLASH_BASE) &&  ((u32) DestAddress <= FLASH_BASE + FLASH_LENGTH))
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000534:	d339      	bcc.n	80005aa <Flash_WriteData+0x92>
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	4a1f      	ldr	r2, [pc, #124]	; (80005b8 <Flash_WriteData+0xa0>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d835      	bhi.n	80005aa <Flash_WriteData+0x92>
	{
		while(FLASH->SR & FLASH_SR_BSY);
 800053e:	bf00      	nop
 8000540:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <Flash_WriteData+0xa4>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	f003 0301 	and.w	r3, r3, #1
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1f9      	bne.n	8000540 <Flash_WriteData+0x28>
		FLASH->CR |= FLASH_CR_PG;
 800054c:	4a1b      	ldr	r2, [pc, #108]	; (80005bc <Flash_WriteData+0xa4>)
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <Flash_WriteData+0xa4>)
 8000550:	691b      	ldr	r3, [r3, #16]
 8000552:	f043 0301 	orr.w	r3, r3, #1
 8000556:	6113      	str	r3, [r2, #16]

		for(Local_Iterator = 0; Local_Iterator < NumberOfHalfWords; Local_Iterator++)
 8000558:	2300      	movs	r3, #0
 800055a:	82fb      	strh	r3, [r7, #22]
 800055c:	e019      	b.n	8000592 <Flash_WriteData+0x7a>
		{
			FLASH->CR |= FLASH_SR_EOP;
 800055e:	4a17      	ldr	r2, [pc, #92]	; (80005bc <Flash_WriteData+0xa4>)
 8000560:	4b16      	ldr	r3, [pc, #88]	; (80005bc <Flash_WriteData+0xa4>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	f043 0320 	orr.w	r3, r3, #32
 8000568:	6113      	str	r3, [r2, #16]
			*(((u16 *)DestAddress) + Local_Iterator) = *(((u16 *)SrcAddress) + Local_Iterator);
 800056a:	8afb      	ldrh	r3, [r7, #22]
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	68fa      	ldr	r2, [r7, #12]
 8000570:	4413      	add	r3, r2
 8000572:	8afa      	ldrh	r2, [r7, #22]
 8000574:	0052      	lsls	r2, r2, #1
 8000576:	68b9      	ldr	r1, [r7, #8]
 8000578:	440a      	add	r2, r1
 800057a:	8812      	ldrh	r2, [r2, #0]
 800057c:	801a      	strh	r2, [r3, #0]
			while(FLASH->SR & FLASH_SR_BSY);
 800057e:	bf00      	nop
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <Flash_WriteData+0xa4>)
 8000582:	68db      	ldr	r3, [r3, #12]
 8000584:	f003 0301 	and.w	r3, r3, #1
 8000588:	2b00      	cmp	r3, #0
 800058a:	d1f9      	bne.n	8000580 <Flash_WriteData+0x68>
		for(Local_Iterator = 0; Local_Iterator < NumberOfHalfWords; Local_Iterator++)
 800058c:	8afb      	ldrh	r3, [r7, #22]
 800058e:	3301      	adds	r3, #1
 8000590:	82fb      	strh	r3, [r7, #22]
 8000592:	8afa      	ldrh	r2, [r7, #22]
 8000594:	88fb      	ldrh	r3, [r7, #6]
 8000596:	429a      	cmp	r2, r3
 8000598:	d3e1      	bcc.n	800055e <Flash_WriteData+0x46>
		}

		FLASH->CR &= ~FLASH_CR_PG;
 800059a:	4a08      	ldr	r2, [pc, #32]	; (80005bc <Flash_WriteData+0xa4>)
 800059c:	4b07      	ldr	r3, [pc, #28]	; (80005bc <Flash_WriteData+0xa4>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	f023 0301 	bic.w	r3, r3, #1
 80005a4:	6113      	str	r3, [r2, #16]
		Local_Error = NO_ERR;
 80005a6:	2300      	movs	r3, #0
 80005a8:	757b      	strb	r3, [r7, #21]
	}
	else
	{
		// Do Nothing
	}
	return Local_Error;
 80005aa:	7d7b      	ldrb	r3, [r7, #21]
 80005ac:	b2db      	uxtb	r3, r3
}
 80005ae:	4618      	mov	r0, r3
 80005b0:	371c      	adds	r7, #28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr
 80005b8:	08004000 	.word	0x08004000
 80005bc:	40022000 	.word	0x40022000

080005c0 <Flash_ErasePage>:

STD_ERR Flash_ErasePage(u32 PageAddress)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
	STD_ERR Local_Error = ERR;
 80005c8:	2301      	movs	r3, #1
 80005ca:	73fb      	strb	r3, [r7, #15]

	/*Check that the address is within the Flash Range*/
	if((PageAddress >= FLASH_BASE )||(PageAddress <= (FLASH_BASE + FLASH_LENGTH)))
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80005d2:	d203      	bcs.n	80005dc <Flash_ErasePage+0x1c>
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a19      	ldr	r2, [pc, #100]	; (800063c <Flash_ErasePage+0x7c>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d829      	bhi.n	8000630 <Flash_ErasePage+0x70>
	{
		while(FLASH->SR & FLASH_SR_BSY);
 80005dc:	bf00      	nop
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <Flash_ErasePage+0x80>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1f9      	bne.n	80005de <Flash_ErasePage+0x1e>
		FLASH->CR |= FLASH_CR_PER;
 80005ea:	4a15      	ldr	r2, [pc, #84]	; (8000640 <Flash_ErasePage+0x80>)
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <Flash_ErasePage+0x80>)
 80005ee:	691b      	ldr	r3, [r3, #16]
 80005f0:	f043 0302 	orr.w	r3, r3, #2
 80005f4:	6113      	str	r3, [r2, #16]
		FLASH->AR = PageAddress;
 80005f6:	4a12      	ldr	r2, [pc, #72]	; (8000640 <Flash_ErasePage+0x80>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	6153      	str	r3, [r2, #20]
		FLASH->CR |= FLASH_CR_STRT;
 80005fc:	4a10      	ldr	r2, [pc, #64]	; (8000640 <Flash_ErasePage+0x80>)
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <Flash_ErasePage+0x80>)
 8000600:	691b      	ldr	r3, [r3, #16]
 8000602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000606:	6113      	str	r3, [r2, #16]
		while(FLASH->SR & FLASH_SR_BSY);
 8000608:	bf00      	nop
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <Flash_ErasePage+0x80>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f9      	bne.n	800060a <Flash_ErasePage+0x4a>

		if(  (*((volatile u32 *)PageAddress) ) == 0xffffffff )
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800061e:	d101      	bne.n	8000624 <Flash_ErasePage+0x64>
		{
			Local_Error = NO_ERR;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
		}

		FLASH->CR &= ~ (FLASH_CR_PER);
 8000624:	4a06      	ldr	r2, [pc, #24]	; (8000640 <Flash_ErasePage+0x80>)
 8000626:	4b06      	ldr	r3, [pc, #24]	; (8000640 <Flash_ErasePage+0x80>)
 8000628:	691b      	ldr	r3, [r3, #16]
 800062a:	f023 0302 	bic.w	r3, r3, #2
 800062e:	6113      	str	r3, [r2, #16]
	}
	return Local_Error;
 8000630:	7bfb      	ldrb	r3, [r7, #15]
}
 8000632:	4618      	mov	r0, r3
 8000634:	3714      	adds	r7, #20
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr
 800063c:	08004000 	.word	0x08004000
 8000640:	40022000 	.word	0x40022000

08000644 <Flash_Lock>:
	FLASH->CR |= FLASH_CR_STRT;
	FLASH->CR &= ~(FLASH_CR_MER);
}

STD_ERR Flash_Lock(void)
{
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
	STD_ERR Local_Error = ERR;
 800064a:	2301      	movs	r3, #1
 800064c:	71fb      	strb	r3, [r7, #7]
	FLASH->CR |= FLASH_CR_LOCK;
 800064e:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <Flash_Lock+0x34>)
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <Flash_Lock+0x34>)
 8000652:	691b      	ldr	r3, [r3, #16]
 8000654:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000658:	6113      	str	r3, [r2, #16]
	if(FLASH->CR & FLASH_CR_LOCK)
 800065a:	4b07      	ldr	r3, [pc, #28]	; (8000678 <Flash_Lock+0x34>)
 800065c:	691b      	ldr	r3, [r3, #16]
 800065e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <Flash_Lock+0x26>
	{
		Local_Error = NO_ERR;
 8000666:	2300      	movs	r3, #0
 8000668:	71fb      	strb	r3, [r7, #7]
	}
	return Local_Error;
 800066a:	79fb      	ldrb	r3, [r7, #7]
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40022000 	.word	0x40022000

0800067c <Flash_Unlock>:

STD_ERR Flash_Unlock(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
	STD_ERR Local_Error = ERR;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
	if(FLASH->CR & FLASH_CR_LOCK)
 8000686:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <Flash_Unlock+0x34>)
 8000688:	691b      	ldr	r3, [r3, #16]
 800068a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800068e:	2b00      	cmp	r3, #0
 8000690:	d007      	beq.n	80006a2 <Flash_Unlock+0x26>
	{
		FLASH->KEYR = FLASH_KEY1;
 8000692:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <Flash_Unlock+0x34>)
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <Flash_Unlock+0x38>)
 8000696:	605a      	str	r2, [r3, #4]
		FLASH->KEYR = FLASH_KEY2;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <Flash_Unlock+0x34>)
 800069a:	4a07      	ldr	r2, [pc, #28]	; (80006b8 <Flash_Unlock+0x3c>)
 800069c:	605a      	str	r2, [r3, #4]
		Local_Error = NO_ERR;
 800069e:	2300      	movs	r3, #0
 80006a0:	71fb      	strb	r3, [r7, #7]
	}
	return Local_Error;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop
 80006b0:	40022000 	.word	0x40022000
 80006b4:	45670123 	.word	0x45670123
 80006b8:	cdef89ab 	.word	0xcdef89ab

080006bc <Flash_EnablePrefetchBuffer>:

void Flash_EnablePrefetchBuffer(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
	/* Enable Prefetch Buffer */
	FLASH->ACR |= FLASH_ACR_PRFTBE;
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <Flash_EnablePrefetchBuffer+0x18>)
 80006c2:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <Flash_EnablePrefetchBuffer+0x18>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40022000 	.word	0x40022000

080006d8 <Flash_SetLatency>:

STD_ERR Flash_SetLatency(u8 Latency)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	STD_ERR Local_Error = ERR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]

	if(Latency <= FLASH_LATENCY_2)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	2b02      	cmp	r3, #2
 80006ea:	d80d      	bhi.n	8000708 <Flash_SetLatency+0x30>
	{
		/* Flash wait state */
		FLASH->ACR &= (u32)((u32)~FLASH_ACR_LATENCY);
 80006ec:	4a09      	ldr	r2, [pc, #36]	; (8000714 <Flash_SetLatency+0x3c>)
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <Flash_SetLatency+0x3c>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 0303 	bic.w	r3, r3, #3
 80006f6:	6013      	str	r3, [r2, #0]
		FLASH->ACR |= (u32)Latency;
 80006f8:	4906      	ldr	r1, [pc, #24]	; (8000714 <Flash_SetLatency+0x3c>)
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <Flash_SetLatency+0x3c>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	4313      	orrs	r3, r2
 8000702:	600b      	str	r3, [r1, #0]
		Local_Error = NO_ERR;
 8000704:	2300      	movs	r3, #0
 8000706:	73fb      	strb	r3, [r7, #15]
	else
	{
		/* Do Nothing */
	}

    return Local_Error;
 8000708:	7bfb      	ldrb	r3, [r7, #15]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr
 8000714:	40022000 	.word	0x40022000

08000718 <GPIO_Init>:
#include "GPIO_private.h"
#include "GPIO_config.h"
#include "GPIO_interface.h"

STD_ERR GPIO_Init(GPIO_t * gpio)
{
 8000718:	b480      	push	{r7}
 800071a:	b087      	sub	sp, #28
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
	STD_ERR Local_ERROR = NO_ERR;
 8000720:	2300      	movs	r3, #0
 8000722:	75fb      	strb	r3, [r7, #23]
	__IO u32 * Register = &(((GPIO_TypeDef *)(gpio->Port))->CRL);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	613b      	str	r3, [r7, #16]
	u32 Local_Mode = gpio->Mode;
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	60bb      	str	r3, [r7, #8]
	u32 Local_Pin = gpio->Pin;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	685b      	ldr	r3, [r3, #4]
 8000734:	60fb      	str	r3, [r7, #12]

	if(Local_Pin <= GPIO_PIN_15)
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	2b0f      	cmp	r3, #15
 800073a:	d84c      	bhi.n	80007d6 <GPIO_Init+0xbe>
	{
		if(Local_Pin >= GPIO_PIN_8)
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2b07      	cmp	r3, #7
 8000740:	d906      	bls.n	8000750 <GPIO_Init+0x38>
		{
			Local_Pin -= GPIO_PIN_8;
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	3b08      	subs	r3, #8
 8000746:	60fb      	str	r3, [r7, #12]
			Register = &(((GPIO_TypeDef *)(gpio->Port))->CRH);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3304      	adds	r3, #4
 800074e:	613b      	str	r3, [r7, #16]
		}

		if(Local_Mode <= GPIO_INPUT_PULLUP_PULLDOWN)
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2b02      	cmp	r3, #2
 8000754:	d816      	bhi.n	8000784 <GPIO_Init+0x6c>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 8000756:	693b      	ldr	r3, [r7, #16]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	68fa      	ldr	r2, [r7, #12]
 800075c:	0092      	lsls	r2, r2, #2
 800075e:	210f      	movs	r1, #15
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	43d2      	mvns	r2, r2
 8000766:	401a      	ands	r2, r3
 8000768:	693b      	ldr	r3, [r7, #16]
 800076a:	601a      	str	r2, [r3, #0]
			*Register |= (Local_Mode << ((Local_Pin * 4) + 2));
 800076c:	693b      	ldr	r3, [r7, #16]
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	009b      	lsls	r3, r3, #2
 8000774:	3302      	adds	r3, #2
 8000776:	68b9      	ldr	r1, [r7, #8]
 8000778:	fa01 f303 	lsl.w	r3, r1, r3
 800077c:	431a      	orrs	r2, r3
 800077e:	693b      	ldr	r3, [r7, #16]
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	e02a      	b.n	80007da <GPIO_Init+0xc2>
		}
		else if(Local_Mode <= GPIO_OUTPUT_AF_OPEN_DRAIN)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b07      	cmp	r3, #7
 8000788:	d822      	bhi.n	80007d0 <GPIO_Init+0xb8>
		{
			*Register &= ~(0x0F << (Local_Pin * 4));
 800078a:	693b      	ldr	r3, [r7, #16]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	0092      	lsls	r2, r2, #2
 8000792:	210f      	movs	r1, #15
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	43d2      	mvns	r2, r2
 800079a:	401a      	ands	r2, r3
 800079c:	693b      	ldr	r3, [r7, #16]
 800079e:	601a      	str	r2, [r3, #0]
			*Register |= ((Local_Mode & 0b11) << ((Local_Pin * 4) + 2));
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	68bb      	ldr	r3, [r7, #8]
 80007a6:	f003 0103 	and.w	r1, r3, #3
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	009b      	lsls	r3, r3, #2
 80007ae:	3302      	adds	r3, #2
 80007b0:	fa01 f303 	lsl.w	r3, r1, r3
 80007b4:	431a      	orrs	r2, r3
 80007b6:	693b      	ldr	r3, [r7, #16]
 80007b8:	601a      	str	r2, [r3, #0]
			*Register |= (GPIO_SPEED << (Local_Pin * 4));
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	68fa      	ldr	r2, [r7, #12]
 80007c0:	0092      	lsls	r2, r2, #2
 80007c2:	2103      	movs	r1, #3
 80007c4:	fa01 f202 	lsl.w	r2, r1, r2
 80007c8:	431a      	orrs	r2, r3
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e004      	b.n	80007da <GPIO_Init+0xc2>
		}
		else
		{
			Local_ERROR = ERR;
 80007d0:	2301      	movs	r3, #1
 80007d2:	75fb      	strb	r3, [r7, #23]
 80007d4:	e001      	b.n	80007da <GPIO_Init+0xc2>
		}
	}
	else
	{
		Local_ERROR = ERR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	75fb      	strb	r3, [r7, #23]
	}
	return Local_ERROR;
 80007da:	7dfb      	ldrb	r3, [r7, #23]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	371c      	adds	r7, #28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bc80      	pop	{r7}
 80007e4:	4770      	bx	lr
	...

080007e8 <NVIC_EnableIRQ>:
#include "NVIC_interface.h"


/* Enable Interrupt */
void NVIC_EnableIRQ(s32 IRQn)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  NVIC->ISER[((u32)(IRQn) >> 5)] = (1 << ((u32)(IRQn) & 0x1F)); /* enable interrupt */
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <NVIC_EnableIRQ+0x28>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	095b      	lsrs	r3, r3, #5
 80007f6:	687a      	ldr	r2, [r7, #4]
 80007f8:	f002 021f 	and.w	r2, r2, #31
 80007fc:	2001      	movs	r0, #1
 80007fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	e000e100 	.word	0xe000e100

08000814 <NVIC_DisableIRQ>:


/* Disable Interrupt */
void NVIC_DisableIRQ(s32 IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  NVIC->ICER[((u32)(IRQn) >> 5)] = (1 << ((u32)(IRQn) & 0x1F)); /* disable interrupt */
 800081c:	4908      	ldr	r1, [pc, #32]	; (8000840 <NVIC_DisableIRQ+0x2c>)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	095b      	lsrs	r3, r3, #5
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	f002 021f 	and.w	r2, r2, #31
 8000828:	2001      	movs	r0, #1
 800082a:	fa00 f202 	lsl.w	r2, r0, r2
 800082e:	3320      	adds	r3, #32
 8000830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	bc80      	pop	{r7}
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	e000e100 	.word	0xe000e100

08000844 <RCCSystemInit>:
#include "RCC_config.h"
#include "RCC_interface.h"


void RCCSystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (u32)0x00000001;
 8000848:	4a17      	ldr	r2, [pc, #92]	; (80008a8 <RCCSystemInit+0x64>)
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <RCCSystemInit+0x64>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f043 0301 	orr.w	r3, r3, #1
 8000852:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while(RCC_CR_HSIRDY != (RCC_CR_HSIRDY & RCC->CR))
 8000854:	bf00      	nop
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <RCCSystemInit+0x64>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	2b02      	cmp	r3, #2
 8000860:	d1f9      	bne.n	8000856 <RCCSystemInit+0x12>
  {
	/* Waiting */
  }

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
  RCC->CFGR &= (u32)0xF8FF0000;
 8000862:	4911      	ldr	r1, [pc, #68]	; (80008a8 <RCCSystemInit+0x64>)
 8000864:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <RCCSystemInit+0x64>)
 8000866:	685a      	ldr	r2, [r3, #4]
 8000868:	4b10      	ldr	r3, [pc, #64]	; (80008ac <RCCSystemInit+0x68>)
 800086a:	4013      	ands	r3, r2
 800086c:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (u32)0xFEF6FFFF;
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <RCCSystemInit+0x64>)
 8000870:	4b0d      	ldr	r3, [pc, #52]	; (80008a8 <RCCSystemInit+0x64>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800087c:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (u32)0xFFFBFFFF;
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <RCCSystemInit+0x64>)
 8000880:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <RCCSystemInit+0x64>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000888:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (u32)0xFF80FFFF;
 800088a:	4a07      	ldr	r2, [pc, #28]	; (80008a8 <RCCSystemInit+0x64>)
 800088c:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <RCCSystemInit+0x64>)
 800088e:	685b      	ldr	r3, [r3, #4]
 8000890:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000894:	6053      	str	r3, [r2, #4]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <RCCSystemInit+0x64>)
 8000898:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800089c:	609a      	str	r2, [r3, #8]
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	40021000 	.word	0x40021000
 80008ac:	f8ff0000 	.word	0xf8ff0000

080008b0 <RCC_StartHSE>:

STD_ERR RCC_StartHSE(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
	__IO u32 Local_StartUpCounter = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
	__IO STD_ERR Local_Error = ERR;
 80008ba:	2301      	movs	r3, #1
 80008bc:	70fb      	strb	r3, [r7, #3]

	  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
	  /* Enable HSE */
	  RCC->CR |= ((u32)RCC_CR_HSEON);
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <RCC_StartHSE+0x54>)
 80008c0:	4b10      	ldr	r3, [pc, #64]	; (8000904 <RCC_StartHSE+0x54>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008c8:	6013      	str	r3, [r2, #0]

	  /* Wait till HSE is ready and if Time out is reached exit */
	  do
	  {
	    Local_StartUpCounter++;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	3301      	adds	r3, #1
 80008ce:	607b      	str	r3, [r7, #4]
	  } while(((RCC->CR & RCC_CR_HSERDY) == 0) && (Local_StartUpCounter != HSE_STARTUP_TIMEOUT));
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <RCC_StartHSE+0x54>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d103      	bne.n	80008e4 <RCC_StartHSE+0x34>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80008e2:	d1f2      	bne.n	80008ca <RCC_StartHSE+0x1a>

	  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <RCC_StartHSE+0x54>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <RCC_StartHSE+0x44>
	  {
		  Local_Error = NO_ERR;
 80008f0:	2300      	movs	r3, #0
 80008f2:	70fb      	strb	r3, [r7, #3]
	  else
	  {
		  /* Do Nothing */
	  }

	  return Local_Error;
 80008f4:	78fb      	ldrb	r3, [r7, #3]
 80008f6:	b2db      	uxtb	r3, r3
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bc80      	pop	{r7}
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40021000 	.word	0x40021000

08000908 <RCC_SetSystemClock72MHz>:

void RCC_SetSystemClock72MHz(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
	/* HCLK = SYSCLK */
	RCC->CFGR |= (u32)RCC_CFGR_HPRE_DIV1;
 800090c:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800090e:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000910:	685b      	ldr	r3, [r3, #4]
 8000912:	6053      	str	r3, [r2, #4]

	/* PCLK2 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE2_DIV1;
 8000914:	4a1c      	ldr	r2, [pc, #112]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	6053      	str	r3, [r2, #4]

	/* PCLK1 = HCLK */
	RCC->CFGR |= (u32)RCC_CFGR_PPRE1_DIV2;
 800091c:	4a1a      	ldr	r2, [pc, #104]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000920:	685b      	ldr	r3, [r3, #4]
 8000922:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000926:	6053      	str	r3, [r2, #4]

	/*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000928:	4a17      	ldr	r2, [pc, #92]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000932:	6053      	str	r3, [r2, #4]
										RCC_CFGR_PLLMULL));
	///////////////////////////
	RCC->CFGR |= (u32)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000934:	4a14      	ldr	r2, [pc, #80]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000938:	685b      	ldr	r3, [r3, #4]
 800093a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800093e:	6053      	str	r3, [r2, #4]
	//RCC->CFGR |= (u32)(RCC_CFGR_PLLMULL9);
	//////////////////////////////////////////////////////////////////////////


	/* Enable PLL */
	RCC->CR |= RCC_CR_PLLON;
 8000940:	4a11      	ldr	r2, [pc, #68]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800094a:	6013      	str	r3, [r2, #0]

	/* Wait till PLL is ready */
	while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800094c:	bf00      	nop
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0f9      	beq.n	800094e <RCC_SetSystemClock72MHz+0x46>
	{
	}

	/* Select PLL as system clock source */
	RCC->CFGR &= (u32)((u32)~(RCC_CFGR_SW));
 800095a:	4a0b      	ldr	r2, [pc, #44]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800095e:	685b      	ldr	r3, [r3, #4]
 8000960:	f023 0303 	bic.w	r3, r3, #3
 8000964:	6053      	str	r3, [r2, #4]
	RCC->CFGR |= (u32)RCC_CFGR_SW_PLL;
 8000966:	4a08      	ldr	r2, [pc, #32]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6053      	str	r3, [r2, #4]

	/* Wait till PLL is used as system clock source */
	while ((RCC->CFGR & (u32)RCC_CFGR_SWS) != (u32)0x08)
 8000972:	bf00      	nop
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <RCC_SetSystemClock72MHz+0x80>)
 8000976:	685b      	ldr	r3, [r3, #4]
 8000978:	f003 030c 	and.w	r3, r3, #12
 800097c:	2b08      	cmp	r3, #8
 800097e:	d1f9      	bne.n	8000974 <RCC_SetSystemClock72MHz+0x6c>
	{
	}
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	bc80      	pop	{r7}
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000

0800098c <RCC_EnableGPIOA>:

	  return SystemCoreClock;
}

void RCC_EnableGPIOA(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= RCC_APB2ENR_IOPAEN;
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <RCC_EnableGPIOA+0x18>)
 8000992:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <RCC_EnableGPIOA+0x18>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	6193      	str	r3, [r2, #24]
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	bc80      	pop	{r7}
 80009a2:	4770      	bx	lr
 80009a4:	40021000 	.word	0x40021000

080009a8 <RCC_ResetGPIOA>:

void RCC_ResetGPIOA(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
	RCC->APB2RSTR	|= RCC_APB2RSTR_IOPARST;
 80009ac:	4a06      	ldr	r2, [pc, #24]	; (80009c8 <RCC_ResetGPIOA+0x20>)
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <RCC_ResetGPIOA+0x20>)
 80009b0:	68db      	ldr	r3, [r3, #12]
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR = 0;
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <RCC_ResetGPIOA+0x20>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000

080009cc <RCC_DisableGPIOA>:

void RCC_DisableGPIOA(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	RCC->APB2ENR	&= ~RCC_APB2ENR_IOPAEN;
 80009d0:	4a04      	ldr	r2, [pc, #16]	; (80009e4 <RCC_DisableGPIOA+0x18>)
 80009d2:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <RCC_DisableGPIOA+0x18>)
 80009d4:	699b      	ldr	r3, [r3, #24]
 80009d6:	f023 0304 	bic.w	r3, r3, #4
 80009da:	6193      	str	r3, [r2, #24]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <RCC_EnableUART>:
{
	RCC->APB2ENR	&= ~RCC_APB2ENR_IOPCEN;
}

void RCC_EnableUART(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
	RCC->APB2ENR	|= RCC_APB2ENR_USART1EN;
 80009ec:	4a04      	ldr	r2, [pc, #16]	; (8000a00 <RCC_EnableUART+0x18>)
 80009ee:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <RCC_EnableUART+0x18>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f6:	6193      	str	r3, [r2, #24]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <RCC_ResetUART>:

void RCC_ResetUART(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
	RCC->APB2RSTR	|= RCC_APB2RSTR_USART1RST;
 8000a08:	4a06      	ldr	r2, [pc, #24]	; (8000a24 <RCC_ResetUART+0x20>)
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <RCC_ResetUART+0x20>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a12:	60d3      	str	r3, [r2, #12]
	RCC->APB2RSTR = 0;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <RCC_ResetUART+0x20>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	60da      	str	r2, [r3, #12]
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bc80      	pop	{r7}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40021000 	.word	0x40021000

08000a28 <RCC_DisableUART>:

void RCC_DisableUART(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	RCC->APB2ENR	&= ~RCC_APB2ENR_USART1EN;
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <RCC_DisableUART+0x18>)
 8000a2e:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <RCC_DisableUART+0x18>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a36:	6193      	str	r3, [r2, #24]
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bc80      	pop	{r7}
 8000a3e:	4770      	bx	lr
 8000a40:	40021000 	.word	0x40021000

08000a44 <RCC_EnableDMA>:

void RCC_EnableDMA(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	RCC->AHBENR	|= RCC_AHBENR_DMA1EN;
 8000a48:	4a04      	ldr	r2, [pc, #16]	; (8000a5c <RCC_EnableDMA+0x18>)
 8000a4a:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <RCC_EnableDMA+0x18>)
 8000a4c:	695b      	ldr	r3, [r3, #20]
 8000a4e:	f043 0301 	orr.w	r3, r3, #1
 8000a52:	6153      	str	r3, [r2, #20]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	40021000 	.word	0x40021000

08000a60 <RCC_DisableDMA>:

void RCC_DisableDMA(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
	RCC->AHBENR	&= ~RCC_AHBENR_DMA1EN;
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <RCC_DisableDMA+0x18>)
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <RCC_DisableDMA+0x18>)
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	f023 0301 	bic.w	r3, r3, #1
 8000a6e:	6153      	str	r3, [r2, #20]
}
 8000a70:	bf00      	nop
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bc80      	pop	{r7}
 8000a76:	4770      	bx	lr
 8000a78:	40021000 	.word	0x40021000

08000a7c <SCB_SetVectorTableOffset>:
#include "SCB_config.h"
#include "SCB_interface.h"

/* Set Offset of Vector Table */
void SCB_SetVectorTableOffset(u32 Address)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	__ASM("DMB");
 8000a84:	f3bf 8f5f 	dmb	sy
	SCB->VTOR =	Address;
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <SCB_SetVectorTableOffset+0x20>)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	6093      	str	r3, [r2, #8]
	__ASM("DSB");
 8000a8e:	f3bf 8f4f 	dsb	sy
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00

08000aa0 <UART_Init>:
#include "UART_interface.h"



void UART_Init(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

	/* Reset all registers */
	USART1->CR1 = 0x0;
 8000aa4:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <UART_Init+0x78>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	819a      	strh	r2, [r3, #12]
	USART1->CR2 = 0x0;
 8000aaa:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <UART_Init+0x78>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	821a      	strh	r2, [r3, #16]
	USART1->CR3 = 0x0;
 8000ab0:	4b19      	ldr	r3, [pc, #100]	; (8000b18 <UART_Init+0x78>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	829a      	strh	r2, [r3, #20]

	/* Select 1 Start bit, 8 or 9 Data bits, n Stop bit */
#ifdef CONFIG_9BITS_DATA
	USART1->CR1 |= USART_CR1_M;
 8000ab6:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <UART_Init+0x78>)
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <UART_Init+0x78>)
 8000aba:	899b      	ldrh	r3, [r3, #12]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	8193      	strh	r3, [r2, #12]
#ifdef CONFIG_1_0_STOP_BIT
	USART1->CR2 &= ~USART_CR2_STOP;
#elif defined CONFIG_1_5_STOP_BIT
	USART1->CR2 |= USART_CR2_STOP_0 | USART_CR2_STOP_1;
#elif defined CONFIG_2_0_STOP_BIT
	USART1->CR2 |= USART_CR2_STOP_1;
 8000ac6:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <UART_Init+0x78>)
 8000ac8:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <UART_Init+0x78>)
 8000aca:	8a1b      	ldrh	r3, [r3, #16]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	8213      	strh	r3, [r2, #16]
	USART1->CR1 |= USART_CR1_PCE;
#endif

	/* Select odd parity */
#ifdef CONFIG_ODD_PARITY
	USART1->CR1 |= USART_CR1_PS;
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <UART_Init+0x78>)
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <UART_Init+0x78>)
 8000ada:	899b      	ldrh	r3, [r3, #12]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	8193      	strh	r3, [r2, #12]
#endif

	/* Enable DMA Mode*/
#ifdef CONFIG_ENABLE_DMA
	USART1->CR3 |= USART_CR3_DMAR;
 8000ae6:	4a0c      	ldr	r2, [pc, #48]	; (8000b18 <UART_Init+0x78>)
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <UART_Init+0x78>)
 8000aea:	8a9b      	ldrh	r3, [r3, #20]
 8000aec:	b29b      	uxth	r3, r3
 8000aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	8293      	strh	r3, [r2, #20]
	USART1->CR3 |= USART_CR3_DMAT;
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <UART_Init+0x78>)
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <UART_Init+0x78>)
 8000afa:	8a9b      	ldrh	r3, [r3, #20]
 8000afc:	b29b      	uxth	r3, r3
 8000afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	8293      	strh	r3, [r2, #20]
#endif
	/* Set baud rate */
	USART1->BRR = (CONFIG_DIV_MANTISSA << 4) | (CONFIG_DIV_FRACTION & 0x0000000F);
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <UART_Init+0x78>)
 8000b08:	f240 227a 	movw	r2, #634	; 0x27a
 8000b0c:	811a      	strh	r2, [r3, #8]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40013800 	.word	0x40013800

08000b1c <UART_Enable>:

void UART_Enable(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
	/* Enable USART1 */
	USART1->CR1 |= USART_CR1_UE;
 8000b20:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <UART_Enable+0x3c>)
 8000b22:	4b0d      	ldr	r3, [pc, #52]	; (8000b58 <UART_Enable+0x3c>)
 8000b24:	899b      	ldrh	r3, [r3, #12]
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	8193      	strh	r3, [r2, #12]

	/* Enable transmitter */
	USART1->CR1 |= USART_CR1_TE;
 8000b30:	4a09      	ldr	r2, [pc, #36]	; (8000b58 <UART_Enable+0x3c>)
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <UART_Enable+0x3c>)
 8000b34:	899b      	ldrh	r3, [r3, #12]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	f043 0308 	orr.w	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	8193      	strh	r3, [r2, #12]

	/* Enable receiver */
	USART1->CR1 |= USART_CR1_RE;
 8000b40:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <UART_Enable+0x3c>)
 8000b42:	4b05      	ldr	r3, [pc, #20]	; (8000b58 <UART_Enable+0x3c>)
 8000b44:	899b      	ldrh	r3, [r3, #12]
 8000b46:	b29b      	uxth	r3, r3
 8000b48:	f043 0304 	orr.w	r3, r3, #4
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	8193      	strh	r3, [r2, #12]
	USART1->CR1 |= USART_CR1_RXNEIE;

	/* Enable Transmission completed interrupt */
	USART1->CR1 |= USART_CR1_TCIE;
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	40013800 	.word	0x40013800

08000b5c <SystemInit>:
  * Initialize the Embedded Flash Interface, the PLL and update the
  * SystemCoreClock variable.
  */

void SystemInit (void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
	RCCSystemInit();
 8000b60:	f7ff fe70 	bl	8000844 <RCCSystemInit>

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
#ifdef SYSCLK_FREQ_72MHz
	SetSysClockTo72();
 8000b64:	f000 f806 	bl	8000b74 <SetSysClockTo72>
#endif

	SCB_SetVectorTableOffset(FLASH_BASE | VECT_TAB_OFFSET); /* Vector Table Relocation in Internal FLASH. */
 8000b68:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000b6c:	f7ff ff86 	bl	8000a7c <SCB_SetVectorTableOffset>
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SetSysClockTo72>:
/**
  * Sets System clock frequency to 72MHz and configure HCLK, PCLK2
  * and PCLK1 prescalers.
  */
static void SetSysClockTo72(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  __IO STD_ERR HSEStatus = ERR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]

  HSEStatus = RCC_StartHSE();
 8000b7e:	f7ff fe97 	bl	80008b0 <RCC_StartHSE>
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]

  if (HSEStatus == NO_ERR)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d106      	bne.n	8000b9c <SetSysClockTo72+0x28>
  {
	Flash_EnablePrefetchBuffer();
 8000b8e:	f7ff fd95 	bl	80006bc <Flash_EnablePrefetchBuffer>
	Flash_SetLatency(FLASH_LATENCY_2);
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fda0 	bl	80006d8 <Flash_SetLatency>
	RCC_SetSystemClock72MHz();
 8000b98:	f7ff feb6 	bl	8000908 <RCC_SetSystemClock72MHz>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }
}
 8000b9c:	bf00      	nop
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <MTP_Init>:
//           //        //             //             //                            //               //               //
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* MTP Initialization */
void MTP_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
	u8 Local_Iterator = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	71fb      	strb	r3, [r7, #7]
	RCC_EnableDMA();
 8000bae:	f7ff ff49 	bl	8000a44 <RCC_EnableDMA>
	RCC_EnableGPIOA();
 8000bb2:	f7ff feeb 	bl	800098c <RCC_EnableGPIOA>
	RCC_EnableUART();
 8000bb6:	f7ff ff17 	bl	80009e8 <RCC_EnableUART>

	for(Local_Iterator = 0; Local_Iterator < sizeof(UARTPins)/sizeof(GPIO_t); Local_Iterator++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	71fb      	strb	r3, [r7, #7]
 8000bbe:	e00c      	b.n	8000bda <MTP_Init+0x36>
	{
		GPIO_Init(&UARTPins[Local_Iterator]);
 8000bc0:	79fa      	ldrb	r2, [r7, #7]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	4413      	add	r3, r2
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MTP_Init+0x88>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fda2 	bl	8000718 <GPIO_Init>
	for(Local_Iterator = 0; Local_Iterator < sizeof(UARTPins)/sizeof(GPIO_t); Local_Iterator++)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	71fb      	strb	r3, [r7, #7]
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d9ef      	bls.n	8000bc0 <MTP_Init+0x1c>
	}

	UART_Init();
 8000be0:	f7ff ff5e 	bl	8000aa0 <UART_Init>

	DMA_ChannelInit(TX_CHANNEL, TxChennel);
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <MTP_Init+0x8c>)
 8000be6:	6819      	ldr	r1, [r3, #0]
 8000be8:	4812      	ldr	r0, [pc, #72]	; (8000c34 <MTP_Init+0x90>)
 8000bea:	f7ff fc1c 	bl	8000426 <DMA_ChannelInit>
	DMA_ChannelInit(RX_CHANNEL, RxChennel);
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MTP_Init+0x94>)
 8000bf0:	6819      	ldr	r1, [r3, #0]
 8000bf2:	4812      	ldr	r0, [pc, #72]	; (8000c3c <MTP_Init+0x98>)
 8000bf4:	f7ff fc17 	bl	8000426 <DMA_ChannelInit>

	DMA_ChennelPeriphAddress(TX_CHANNEL, UART_DATAREG_ADDRESS);
 8000bf8:	4911      	ldr	r1, [pc, #68]	; (8000c40 <MTP_Init+0x9c>)
 8000bfa:	480e      	ldr	r0, [pc, #56]	; (8000c34 <MTP_Init+0x90>)
 8000bfc:	f7ff fc5b 	bl	80004b6 <DMA_ChennelPeriphAddress>
	DMA_ChennelPeriphAddress(RX_CHANNEL, UART_DATAREG_ADDRESS);
 8000c00:	490f      	ldr	r1, [pc, #60]	; (8000c40 <MTP_Init+0x9c>)
 8000c02:	480e      	ldr	r0, [pc, #56]	; (8000c3c <MTP_Init+0x98>)
 8000c04:	f7ff fc57 	bl	80004b6 <DMA_ChennelPeriphAddress>

	DMA_ChennelInterruptEnable(TX_CHANNEL);
 8000c08:	480a      	ldr	r0, [pc, #40]	; (8000c34 <MTP_Init+0x90>)
 8000c0a:	f7ff fc61 	bl	80004d0 <DMA_ChennelInterruptEnable>
	DMA_ChennelInterruptEnable(RX_CHANNEL);
 8000c0e:	480b      	ldr	r0, [pc, #44]	; (8000c3c <MTP_Init+0x98>)
 8000c10:	f7ff fc5e 	bl	80004d0 <DMA_ChennelInterruptEnable>

	Interrupts_EnableIRQ(DMA1_Channel4_IRQn);
 8000c14:	200e      	movs	r0, #14
 8000c16:	f7ff fbf0 	bl	80003fa <Interrupts_EnableIRQ>
	Interrupts_EnableIRQ(DMA1_Channel5_IRQn);
 8000c1a:	200f      	movs	r0, #15
 8000c1c:	f7ff fbed 	bl	80003fa <Interrupts_EnableIRQ>
	UART_Enable();
 8000c20:	f7ff ff7c 	bl	8000b1c <UART_Enable>

}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20002800 	.word	0x20002800
 8000c30:	2000281c 	.word	0x2000281c
 8000c34:	40020044 	.word	0x40020044
 8000c38:	20002818 	.word	0x20002818
 8000c3c:	40020058 	.word	0x40020058
 8000c40:	40013804 	.word	0x40013804

08000c44 <MTP_ReceiveData>:

STD_ERR MTP_ReceiveData(MTP_MSG_t * msg, u32 CyclesToBreak)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b088      	sub	sp, #32
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
	u8 temp_bytes[3];
	u16 Received_CheckSum;
	u16 Calculated_CheckSum;

	/* Prepare to receive */
	if(ProcessState == STOPPED)
 8000c4e:	4b89      	ldr	r3, [pc, #548]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d103      	bne.n	8000c5e <MTP_ReceiveData+0x1a>
	{
		ProcessState = WAITING_FOR_STARTBYTE;
 8000c56:	4b87      	ldr	r3, [pc, #540]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e001      	b.n	8000c62 <MTP_ReceiveData+0x1e>
	}
	else
	{
		return ERR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e103      	b.n	8000e6a <MTP_ReceiveData+0x226>
	}

	/* Receive a message */
	while(1)
	{
		switch(ProcessState)
 8000c62:	4b84      	ldr	r3, [pc, #528]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b02      	cmp	r3, #2
 8000c68:	d054      	beq.n	8000d14 <MTP_ReceiveData+0xd0>
 8000c6a:	2b03      	cmp	r3, #3
 8000c6c:	f000 809f 	beq.w	8000dae <MTP_ReceiveData+0x16a>
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	f040 80f7 	bne.w	8000e64 <MTP_ReceiveData+0x220>
		{
		case WAITING_FOR_STARTBYTE:
			/* Receive 1 byte (start byte) */
			RECEIVE_DATA(1, &temp_bytes);
 8000c76:	2101      	movs	r1, #1
 8000c78:	487f      	ldr	r0, [pc, #508]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000c7a:	f7ff fc01 	bl	8000480 <DMA_ChennelNumberOfData>
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	487c      	ldr	r0, [pc, #496]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000c86:	f7ff fc09 	bl	800049c <DMA_ChennelMemAddress>
 8000c8a:	487b      	ldr	r0, [pc, #492]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000c8c:	f7ff fbda 	bl	8000444 <DMA_ChennelEnable>
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	e024      	b.n	8000ce0 <MTP_ReceiveData+0x9c>
 8000c96:	4b77      	ldr	r3, [pc, #476]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d10e      	bne.n	8000cbc <MTP_ReceiveData+0x78>
 8000c9e:	69fa      	ldr	r2, [r7, #28]
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d319      	bcc.n	8000cda <MTP_ReceiveData+0x96>
 8000ca6:	4b73      	ldr	r3, [pc, #460]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	4b71      	ldr	r3, [pc, #452]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
 8000cb2:	4871      	ldr	r0, [pc, #452]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000cb4:	f7ff fbd5 	bl	8000462 <DMA_ChennelDisable>
 8000cb8:	2301      	movs	r3, #1
 8000cba:	e0d6      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000cbc:	69fb      	ldr	r3, [r7, #28]
 8000cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc2:	d10a      	bne.n	8000cda <MTP_ReceiveData+0x96>
 8000cc4:	4b6b      	ldr	r3, [pc, #428]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
 8000cca:	4b6a      	ldr	r3, [pc, #424]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
 8000cd0:	4869      	ldr	r0, [pc, #420]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000cd2:	f7ff fbc6 	bl	8000462 <DMA_ChennelDisable>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e0c7      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	61fb      	str	r3, [r7, #28]
 8000ce0:	4b66      	ldr	r3, [pc, #408]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1d5      	bne.n	8000c96 <MTP_ReceiveData+0x52>
 8000cea:	4863      	ldr	r0, [pc, #396]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000cec:	f7ff fbb9 	bl	8000462 <DMA_ChennelDisable>
 8000cf0:	4b62      	ldr	r3, [pc, #392]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]

			/* check if start byte is correct */
			if(temp_bytes[0] == MTP_START_BYTE)
 8000cf6:	7b3b      	ldrb	r3, [r7, #12]
 8000cf8:	2b25      	cmp	r3, #37	; 0x25
 8000cfa:	d103      	bne.n	8000d04 <MTP_ReceiveData+0xc0>
			{
				ProcessState = WAITING_FOR_ID_AND_LENGTH;
 8000cfc:	4b5d      	ldr	r3, [pc, #372]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000cfe:	2202      	movs	r2, #2
 8000d00:	701a      	strb	r2, [r3, #0]
			else
			{
				/* Start byte is not correct */
				RECEIVE_ERROR();
			}
			break;
 8000d02:	e0b1      	b.n	8000e68 <MTP_ReceiveData+0x224>
				RECEIVE_ERROR();
 8000d04:	4b5b      	ldr	r3, [pc, #364]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	701a      	strb	r2, [r3, #0]
 8000d0a:	485b      	ldr	r0, [pc, #364]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d0c:	f7ff fba9 	bl	8000462 <DMA_ChennelDisable>
 8000d10:	2301      	movs	r3, #1
 8000d12:	e0aa      	b.n	8000e6a <MTP_ReceiveData+0x226>

		case WAITING_FOR_ID_AND_LENGTH:
			/* Receive 3 bytes (ID & length) */
			RECEIVE_DATA(3, &temp_bytes);
 8000d14:	2103      	movs	r1, #3
 8000d16:	4858      	ldr	r0, [pc, #352]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d18:	f7ff fbb2 	bl	8000480 <DMA_ChennelNumberOfData>
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	4619      	mov	r1, r3
 8000d22:	4855      	ldr	r0, [pc, #340]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d24:	f7ff fbba 	bl	800049c <DMA_ChennelMemAddress>
 8000d28:	4853      	ldr	r0, [pc, #332]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d2a:	f7ff fb8b 	bl	8000444 <DMA_ChennelEnable>
 8000d2e:	2300      	movs	r3, #0
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e024      	b.n	8000d7e <MTP_ReceiveData+0x13a>
 8000d34:	4b4f      	ldr	r3, [pc, #316]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b01      	cmp	r3, #1
 8000d3a:	d10e      	bne.n	8000d5a <MTP_ReceiveData+0x116>
 8000d3c:	69ba      	ldr	r2, [r7, #24]
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d319      	bcc.n	8000d78 <MTP_ReceiveData+0x134>
 8000d44:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	701a      	strb	r2, [r3, #0]
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
 8000d50:	4849      	ldr	r0, [pc, #292]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d52:	f7ff fb86 	bl	8000462 <DMA_ChennelDisable>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e087      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000d5a:	69bb      	ldr	r3, [r7, #24]
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d10a      	bne.n	8000d78 <MTP_ReceiveData+0x134>
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	701a      	strb	r2, [r3, #0]
 8000d68:	4b42      	ldr	r3, [pc, #264]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	4842      	ldr	r0, [pc, #264]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d70:	f7ff fb77 	bl	8000462 <DMA_ChennelDisable>
 8000d74:	2301      	movs	r3, #1
 8000d76:	e078      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	4b3f      	ldr	r3, [pc, #252]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d1d5      	bne.n	8000d34 <MTP_ReceiveData+0xf0>
 8000d88:	483b      	ldr	r0, [pc, #236]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000d8a:	f7ff fb6a 	bl	8000462 <DMA_ChennelDisable>
 8000d8e:	4b3b      	ldr	r3, [pc, #236]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	701a      	strb	r2, [r3, #0]

			/* Write ID byte */
			msg->ID = temp_bytes[0];
 8000d94:	7b3a      	ldrb	r2, [r7, #12]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	701a      	strb	r2, [r3, #0]

			/* Write length bytes */
			msg->length = *(u16 *)&temp_bytes[1];
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	3301      	adds	r3, #1
 8000da0:	881a      	ldrh	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	811a      	strh	r2, [r3, #8]

			ProcessState = WAITING_FOR_DATA_AND_CHECKSUM;
 8000da6:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000da8:	2203      	movs	r2, #3
 8000daa:	701a      	strb	r2, [r3, #0]
			break;
 8000dac:	e05c      	b.n	8000e68 <MTP_ReceiveData+0x224>

		case WAITING_FOR_DATA_AND_CHECKSUM:
			/* Receive data + 2 bytes(checksum) */
			RECEIVE_DATA((msg->length) + 2, (void *)((u32)(msg->Buffer)));
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	891b      	ldrh	r3, [r3, #8]
 8000db2:	3302      	adds	r3, #2
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	4619      	mov	r1, r3
 8000db8:	482f      	ldr	r0, [pc, #188]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000dba:	f7ff fb61 	bl	8000480 <DMA_ChennelNumberOfData>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	482c      	ldr	r0, [pc, #176]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000dc6:	f7ff fb69 	bl	800049c <DMA_ChennelMemAddress>
 8000dca:	482b      	ldr	r0, [pc, #172]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000dcc:	f7ff fb3a 	bl	8000444 <DMA_ChennelEnable>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e024      	b.n	8000e20 <MTP_ReceiveData+0x1dc>
 8000dd6:	4b27      	ldr	r3, [pc, #156]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <MTP_ReceiveData+0x1b8>
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d319      	bcc.n	8000e1a <MTP_ReceiveData+0x1d6>
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	4821      	ldr	r0, [pc, #132]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000df4:	f7ff fb35 	bl	8000462 <DMA_ChennelDisable>
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e036      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e02:	d10a      	bne.n	8000e1a <MTP_ReceiveData+0x1d6>
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	4819      	ldr	r0, [pc, #100]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000e12:	f7ff fb26 	bl	8000462 <DMA_ChennelDisable>
 8000e16:	2301      	movs	r3, #1
 8000e18:	e027      	b.n	8000e6a <MTP_ReceiveData+0x226>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d1d5      	bne.n	8000dd6 <MTP_ReceiveData+0x192>
 8000e2a:	4813      	ldr	r0, [pc, #76]	; (8000e78 <MTP_ReceiveData+0x234>)
 8000e2c:	f7ff fb19 	bl	8000462 <DMA_ChennelDisable>
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <MTP_ReceiveData+0x238>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	701a      	strb	r2, [r3, #0]

			/* Extract checksum from the message (last 2 bytes)*/
			Received_CheckSum = *(u16 *)((msg->Buffer) + msg->length);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	8912      	ldrh	r2, [r2, #8]
 8000e3e:	4413      	add	r3, r2
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	827b      	strh	r3, [r7, #18]

			/* Calculate and compare checksum */
			Calculated_CheckSum = MTP_CalculateChecksum(msg);
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f000 f881 	bl	8000f4c <MTP_CalculateChecksum>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	823b      	strh	r3, [r7, #16]

			/* Stop the process */
			ProcessState = STOPPED;
 8000e4e:	4b09      	ldr	r3, [pc, #36]	; (8000e74 <MTP_ReceiveData+0x230>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			if(Calculated_CheckSum == Received_CheckSum)
 8000e54:	8a3a      	ldrh	r2, [r7, #16]
 8000e56:	8a7b      	ldrh	r3, [r7, #18]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d101      	bne.n	8000e60 <MTP_ReceiveData+0x21c>
			{
				return NO_ERR;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	e004      	b.n	8000e6a <MTP_ReceiveData+0x226>
			}
			else
			{
				return ERR;
 8000e60:	2301      	movs	r3, #1
 8000e62:	e002      	b.n	8000e6a <MTP_ReceiveData+0x226>
			}
			break;

		default:
			return ERR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e000      	b.n	8000e6a <MTP_ReceiveData+0x226>
		switch(ProcessState)
 8000e68:	e6fb      	b.n	8000c62 <MTP_ReceiveData+0x1e>
		}
	}

	return ERR;
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3720      	adds	r7, #32
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	2000283e 	.word	0x2000283e
 8000e78:	40020058 	.word	0x40020058
 8000e7c:	2000283c 	.word	0x2000283c

08000e80 <MTP_SendData>:

STD_ERR MTP_SendData(MTP_MSG_t * msg)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b085      	sub	sp, #20
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
	static MTPState_t ProcessState = STOPPED;
	u32 Local_Counter;

	/* Check if the process is running (in multi-threads systems)*/
	if(ProcessState != STOPPED)
 8000e88:	4b2b      	ldr	r3, [pc, #172]	; (8000f38 <MTP_SendData+0xb8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MTP_SendData+0x14>
	{
			return ERR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	e04d      	b.n	8000f30 <MTP_SendData+0xb0>
	}
	else
	{
		ProcessState = SENDING_MESSAGE;
 8000e94:	4b28      	ldr	r3, [pc, #160]	; (8000f38 <MTP_SendData+0xb8>)
 8000e96:	2204      	movs	r2, #4
 8000e98:	701a      	strb	r2, [r3, #0]
	}

	/* Writing start byte to buffer */
	transimissinBuffer[0] = MTP_START_BYTE;
 8000e9a:	4b28      	ldr	r3, [pc, #160]	; (8000f3c <MTP_SendData+0xbc>)
 8000e9c:	2225      	movs	r2, #37	; 0x25
 8000e9e:	701a      	strb	r2, [r3, #0]
	/* Writing ID byte to buffer */
	transimissinBuffer[1] = msg->ID;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	781a      	ldrb	r2, [r3, #0]
 8000ea4:	4b25      	ldr	r3, [pc, #148]	; (8000f3c <MTP_SendData+0xbc>)
 8000ea6:	705a      	strb	r2, [r3, #1]
	/* Writing length bytes to buffer */
	*((u16 *) &transimissinBuffer[2]) = msg->length;
 8000ea8:	4a25      	ldr	r2, [pc, #148]	; (8000f40 <MTP_SendData+0xc0>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	891b      	ldrh	r3, [r3, #8]
 8000eae:	8013      	strh	r3, [r2, #0]

	/* Writing data bytes to buffer */
	for(Local_Counter = 0; Local_Counter < msg->length; Local_Counter++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e00d      	b.n	8000ed2 <MTP_SendData+0x52>
	{
		*((u16 *) &transimissinBuffer[4 + Local_Counter]) = msg->Buffer[Local_Counter];
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	4a20      	ldr	r2, [pc, #128]	; (8000f3c <MTP_SendData+0xbc>)
 8000ebc:	4413      	add	r3, r2
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6851      	ldr	r1, [r2, #4]
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	440a      	add	r2, r1
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	801a      	strh	r2, [r3, #0]
	for(Local_Counter = 0; Local_Counter < msg->length; Local_Counter++)
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	891b      	ldrh	r3, [r3, #8]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d8eb      	bhi.n	8000eb6 <MTP_SendData+0x36>
	}

	/* Writing checksum bytes to buffer */
	*((u16 *) &transimissinBuffer[msg->length + 4]) = MTP_CalculateChecksum(msg);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	891b      	ldrh	r3, [r3, #8]
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	4a15      	ldr	r2, [pc, #84]	; (8000f3c <MTP_SendData+0xbc>)
 8000ee6:	189c      	adds	r4, r3, r2
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f000 f82f 	bl	8000f4c <MTP_CalculateChecksum>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	8023      	strh	r3, [r4, #0]

	/* Prepare DMA */
	DMA_ChennelNumberOfData(TX_CHANNEL, msg->length + 6);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	891b      	ldrh	r3, [r3, #8]
 8000ef6:	3306      	adds	r3, #6
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4619      	mov	r1, r3
 8000efc:	4811      	ldr	r0, [pc, #68]	; (8000f44 <MTP_SendData+0xc4>)
 8000efe:	f7ff fabf 	bl	8000480 <DMA_ChennelNumberOfData>
	DMA_ChennelMemAddress(TX_CHANNEL, &transimissinBuffer);
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <MTP_SendData+0xbc>)
 8000f04:	480f      	ldr	r0, [pc, #60]	; (8000f44 <MTP_SendData+0xc4>)
 8000f06:	f7ff fac9 	bl	800049c <DMA_ChennelMemAddress>
	TxDMAState = SENDING;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MTP_SendData+0xc8>)
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]

	/* Start transmission */
	DMA_ChennelEnable(TX_CHANNEL);
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <MTP_SendData+0xc4>)
 8000f12:	f7ff fa97 	bl	8000444 <DMA_ChennelEnable>

	/* Wait to finish */
	while(TxDMAState != DATA_SENT);
 8000f16:	bf00      	nop
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <MTP_SendData+0xc8>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d1fa      	bne.n	8000f18 <MTP_SendData+0x98>

	/* End of transmission */
	DMA_ChennelDisable(TX_CHANNEL);
 8000f22:	4808      	ldr	r0, [pc, #32]	; (8000f44 <MTP_SendData+0xc4>)
 8000f24:	f7ff fa9d 	bl	8000462 <DMA_ChennelDisable>
	ProcessState = STOPPED;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <MTP_SendData+0xb8>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	701a      	strb	r2, [r3, #0]

	return NO_ERR;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd90      	pop	{r4, r7, pc}
 8000f38:	2000283f 	.word	0x2000283f
 8000f3c:	20002850 	.word	0x20002850
 8000f40:	20002852 	.word	0x20002852
 8000f44:	40020044 	.word	0x40020044
 8000f48:	2000283d 	.word	0x2000283d

08000f4c <MTP_CalculateChecksum>:

u16 MTP_CalculateChecksum(MTP_MSG_t * msg)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	u16 Local_CHKCounter = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	81fb      	strh	r3, [r7, #14]
	u16 Local_CheckSum = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	81bb      	strh	r3, [r7, #12]
	u8 * Local_DataBuffer;

	/* Checksum = ID byte(1) + Length bytes(2) + Data bytes(N) */

	Local_CheckSum += (msg->ID);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	b29a      	uxth	r2, r3
 8000f62:	89bb      	ldrh	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	81bb      	strh	r3, [r7, #12]
	Local_CheckSum += (u8)(msg->length);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	891b      	ldrh	r3, [r3, #8]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	89bb      	ldrh	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	81bb      	strh	r3, [r7, #12]
	Local_CheckSum += (u8)((msg->length) >> 8);
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	891b      	ldrh	r3, [r3, #8]
 8000f7a:	0a1b      	lsrs	r3, r3, #8
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	89bb      	ldrh	r3, [r7, #12]
 8000f84:	4413      	add	r3, r2
 8000f86:	81bb      	strh	r3, [r7, #12]
	Local_DataBuffer = (msg->Buffer);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	60bb      	str	r3, [r7, #8]

	/* Calculate Checksum for data */
	for(Local_CHKCounter = 0; Local_CHKCounter < (msg->length); Local_CHKCounter++)
 8000f8e:	2300      	movs	r3, #0
 8000f90:	81fb      	strh	r3, [r7, #14]
 8000f92:	e00b      	b.n	8000fac <MTP_CalculateChecksum+0x60>
	{
		Local_CheckSum += *Local_DataBuffer;
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	89bb      	ldrh	r3, [r7, #12]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	81bb      	strh	r3, [r7, #12]
		Local_DataBuffer++;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	60bb      	str	r3, [r7, #8]
	for(Local_CHKCounter = 0; Local_CHKCounter < (msg->length); Local_CHKCounter++)
 8000fa6:	89fb      	ldrh	r3, [r7, #14]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	81fb      	strh	r3, [r7, #14]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	891b      	ldrh	r3, [r3, #8]
 8000fb0:	89fa      	ldrh	r2, [r7, #14]
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	d3ee      	bcc.n	8000f94 <MTP_CalculateChecksum+0x48>
	}

	return Local_CheckSum;
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	TxDMAState = DATA_SENT;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <DMA1_Channel4_IRQHandler+0x14>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	701a      	strb	r2, [r3, #0]
	DMA_InterruptFlagClear(4);
 8000fce:	2004      	movs	r0, #4
 8000fd0:	f7ff fa8e 	bl	80004f0 <DMA_InterruptFlagClear>
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000283d 	.word	0x2000283d

08000fdc <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
	RxDMAState = DATA_RECEIVED;
 8000fe0:	4b03      	ldr	r3, [pc, #12]	; (8000ff0 <DMA1_Channel5_IRQHandler+0x14>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	701a      	strb	r2, [r3, #0]
	DMA_InterruptFlagClear(5);
 8000fe6:	2005      	movs	r0, #5
 8000fe8:	f7ff fa82 	bl	80004f0 <DMA_InterruptFlagClear>
}
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000283c 	.word	0x2000283c

08000ff4 <__libc_init_array>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	2500      	movs	r5, #0
 8000ff8:	4e0c      	ldr	r6, [pc, #48]	; (800102c <__libc_init_array+0x38>)
 8000ffa:	4c0d      	ldr	r4, [pc, #52]	; (8001030 <__libc_init_array+0x3c>)
 8000ffc:	1ba4      	subs	r4, r4, r6
 8000ffe:	10a4      	asrs	r4, r4, #2
 8001000:	42a5      	cmp	r5, r4
 8001002:	d109      	bne.n	8001018 <__libc_init_array+0x24>
 8001004:	f000 f81a 	bl	800103c <_init>
 8001008:	2500      	movs	r5, #0
 800100a:	4e0a      	ldr	r6, [pc, #40]	; (8001034 <__libc_init_array+0x40>)
 800100c:	4c0a      	ldr	r4, [pc, #40]	; (8001038 <__libc_init_array+0x44>)
 800100e:	1ba4      	subs	r4, r4, r6
 8001010:	10a4      	asrs	r4, r4, #2
 8001012:	42a5      	cmp	r5, r4
 8001014:	d105      	bne.n	8001022 <__libc_init_array+0x2e>
 8001016:	bd70      	pop	{r4, r5, r6, pc}
 8001018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800101c:	4798      	blx	r3
 800101e:	3501      	adds	r5, #1
 8001020:	e7ee      	b.n	8001000 <__libc_init_array+0xc>
 8001022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001026:	4798      	blx	r3
 8001028:	3501      	adds	r5, #1
 800102a:	e7f2      	b.n	8001012 <__libc_init_array+0x1e>
 800102c:	08001054 	.word	0x08001054
 8001030:	08001054 	.word	0x08001054
 8001034:	08001054 	.word	0x08001054
 8001038:	08001058 	.word	0x08001058

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
